{
  "version": 3,
  "sources": ["../../../../src/handlers/createOrder.ts", "../../../../src/config/aws.ts", "../../../../src/service/services.ts"],
  "sourcesContent": ["import { SendMessageCommand } from '@aws-sdk/client-sqs'\nimport { APIGatewayProxyEvent } from 'aws-lambda'\nimport { sqs } from '../config/aws'\nimport { v4 as uuidv4 } from 'uuid'\n\nimport { listQueuesWithMessageCount } from '../service/services'\n\nexport const handler = async (event: APIGatewayProxyEvent) => {\n    console.log('\\n\\n=== INICIANDO HANDLER ===')\n    // Primero verificar/crear la cola\n    // await ensureQueueExists('order-queue')\n    // await listQueuesWithMessageCount()\n\n    try {\n        if (!event.body) return { statusCode: 400, body: JSON.stringify({ error: 'Falta body' }) }\n        const order = JSON.parse(event.body)\n        console.log('\\n\\n\uD83D\uDCE6 Orden recibida:', order)\n\n        // Agregar timestamp y ID \u00FAnico si no existe\n        if (!order.orderId) order.orderId = `order-${Date.now()}`\n        order.timestamp = new Date().toISOString()\n        // const correlationId = uuidv4()\n        const correlationId = `correlationId-${Date.now()}`\n        order.correlationId = correlationId\n\n        const queueUrl = process.env.QUEUE_URL || null\n        if (!queueUrl) throw new Error('QUEUE_URL is not defined')\n\n        console.log('\\n\\n\uD83C\uDFAF Enviando a cola URL:', queueUrl)\n        const params = {\n            QueueUrl: queueUrl,\n            MessageBody: JSON.stringify(order),\n            MessageAttributes: {\n                source: {\n                    DataType: 'String',\n                    StringValue: 'slsA'\n                }\n            }\n        }\n\n        const result = await sqs.send(new SendMessageCommand(params))\n        console.log(`[slsA] correlationId=${correlationId} | Mensaje enviado: ${result.MessageId}`)\n\n        // Verificar que se envi\u00F3\n        await listQueuesWithMessageCount()\n\n        const res = { message: 'Pedido enviado', orderId: order.orderId, messageId: result.MessageId }\n        return { statusCode: 202, body: JSON.stringify(res) }\n    } catch (error) {\n        console.error('\\n\\n\u274C Error enviando pedido:', error)\n        return {\n            statusCode: 500,\n            body: JSON.stringify({\n                error: 'Error interno',\n                details: error instanceof Error ? error.message : String(error)\n            })\n        }\n    }\n}\n", "import { SQS } from '@aws-sdk/client-sqs'\n\nexport const sqs = new SQS({\n    endpoint: process.env.AWS_ENDPOINT || 'http://localhost:4566',\n    region: process.env.AWS_REGION || 'us-east-1',\n    credentials: {\n        accessKeyId: 'test',\n        secretAccessKey: 'test',\n    },\n})\n", "import { GetQueueUrlCommand, CreateQueueCommand, ListQueuesCommand, GetQueueAttributesCommand } from '@aws-sdk/client-sqs'\nimport { sqs } from '../config/aws'\n\nexport const queueExists = async (queueName: string): Promise<string | null> => {\n    try {\n        const result = await sqs.send(new GetQueueUrlCommand({ QueueName: queueName }))\n        return result.QueueUrl || null\n    } catch (err: any) {\n        if (err.code === 'AWS.SimpleQueueService.NonExistentQueue') return null\n        throw err\n    }\n}\n\nexport const ensureQueueExists = async (queueName: string): Promise<string> => {\n    try {\n        const existingUrl = await queueExists(queueName)\n        if (existingUrl) {\n            console.log(`\\n\\n\u2705 Cola ya existe: ${existingUrl}`)\n            return existingUrl\n        }\n\n        const params = {\n            QueueName: queueName,\n            Attributes: {\n                VisibilityTimeoutSeconds: '300',\n                MessageRetentionPeriod: '1209600'\n            }\n        }\n\n        const result = await sqs.send(new CreateQueueCommand(params))\n        console.log(`\\n\\n\uD83C\uDD95 Cola creada: ${result.QueueUrl}`)\n        return result.QueueUrl!\n    } catch (error) {\n        console.error('\\n\\n\u274C Error creando la cola:', error)\n        throw error\n    }\n}\n\nexport const listQueuesWithMessageCount = async () => {\n    try {\n        const queuesData = await sqs.send(new ListQueuesCommand({}))\n        if (!queuesData.QueueUrls || queuesData.QueueUrls.length === 0) {\n            console.log('\\n\\n\uD83D\uDCED No hay colas disponibles')\n            return\n        }\n\n        console.log('\\n\\n\uD83D\uDCCB Estado de las colas:')\n        for (const queueUrl of queuesData.QueueUrls) {\n            const attrData = await sqs.send(new GetQueueAttributesCommand({\n                QueueUrl: queueUrl,\n                AttributeNames: ['ApproximateNumberOfMessages', 'ApproximateNumberOfMessagesNotVisible']\n            }))\n\n            const available = attrData.Attributes?.ApproximateNumberOfMessages || '0'\n            const inFlight = attrData.Attributes?.ApproximateNumberOfMessagesNotVisible || '0'\n\n            console.log(`   \u2022 ${queueUrl}`)\n            console.log(`     \uD83D\uDCE8 Disponibles: ${available}`)\n            console.log(`     \u23F3 En procesamiento: ${inFlight}`)\n        }\n    } catch (error) {\n        console.error('\\n\\n\u274C Error listando colas:', error)\n    }\n}"],
  "mappings": ";AAAA,SAAS,0BAA0B;;;ACAnC,SAAS,WAAW;AAEb,IAAM,MAAM,IAAI,IAAI;AAAA,EACvB,UAAU,QAAQ,IAAI,gBAAgB;AAAA,EACtC,QAAQ,QAAQ,IAAI,cAAc;AAAA,EAClC,aAAa;AAAA,IACT,aAAa;AAAA,IACb,iBAAiB;AAAA,EACrB;AACJ,CAAC;;;ACTD,SAAS,oBAAoB,oBAAoB,mBAAmB,iCAAiC;AAsC9F,IAAM,6BAA6B,YAAY;AAClD,MAAI;AACA,UAAM,aAAa,MAAM,IAAI,KAAK,IAAI,kBAAkB,CAAC,CAAC,CAAC;AAC3D,QAAI,CAAC,WAAW,aAAa,WAAW,UAAU,WAAW,GAAG;AAC5D,cAAQ,IAAI,wCAAiC;AAC7C;AAAA,IACJ;AAEA,YAAQ,IAAI,oCAA6B;AACzC,eAAW,YAAY,WAAW,WAAW;AACzC,YAAM,WAAW,MAAM,IAAI,KAAK,IAAI,0BAA0B;AAAA,QAC1D,UAAU;AAAA,QACV,gBAAgB,CAAC,+BAA+B,uCAAuC;AAAA,MAC3F,CAAC,CAAC;AAEF,YAAM,YAAY,SAAS,YAAY,+BAA+B;AACtE,YAAM,WAAW,SAAS,YAAY,yCAAyC;AAE/E,cAAQ,IAAI,aAAQ,QAAQ,EAAE;AAC9B,cAAQ,IAAI,+BAAwB,SAAS,EAAE;AAC/C,cAAQ,IAAI,iCAA4B,QAAQ,EAAE;AAAA,IACtD;AAAA,EACJ,SAAS,OAAO;AACZ,YAAQ,MAAM,oCAA+B,KAAK;AAAA,EACtD;AACJ;;;AFxDO,IAAM,UAAU,OAAO,UAAgC;AAC1D,UAAQ,IAAI,+BAA+B;AAK3C,MAAI;AACA,QAAI,CAAC,MAAM,KAAM,QAAO,EAAE,YAAY,KAAK,MAAM,KAAK,UAAU,EAAE,OAAO,aAAa,CAAC,EAAE;AACzF,UAAM,QAAQ,KAAK,MAAM,MAAM,IAAI;AACnC,YAAQ,IAAI,iCAA0B,KAAK;AAG3C,QAAI,CAAC,MAAM,QAAS,OAAM,UAAU,SAAS,KAAK,IAAI,CAAC;AACvD,UAAM,aAAY,oBAAI,KAAK,GAAE,YAAY;AAEzC,UAAM,gBAAgB,iBAAiB,KAAK,IAAI,CAAC;AACjD,UAAM,gBAAgB;AAEtB,UAAM,WAAW,QAAQ,IAAI,aAAa;AAC1C,QAAI,CAAC,SAAU,OAAM,IAAI,MAAM,0BAA0B;AAEzD,YAAQ,IAAI,sCAA+B,QAAQ;AACnD,UAAM,SAAS;AAAA,MACX,UAAU;AAAA,MACV,aAAa,KAAK,UAAU,KAAK;AAAA,MACjC,mBAAmB;AAAA,QACf,QAAQ;AAAA,UACJ,UAAU;AAAA,UACV,aAAa;AAAA,QACjB;AAAA,MACJ;AAAA,IACJ;AAEA,UAAM,SAAS,MAAM,IAAI,KAAK,IAAI,mBAAmB,MAAM,CAAC;AAC5D,YAAQ,IAAI,wBAAwB,aAAa,uBAAuB,OAAO,SAAS,EAAE;AAG1F,UAAM,2BAA2B;AAEjC,UAAM,MAAM,EAAE,SAAS,kBAAkB,SAAS,MAAM,SAAS,WAAW,OAAO,UAAU;AAC7F,WAAO,EAAE,YAAY,KAAK,MAAM,KAAK,UAAU,GAAG,EAAE;AAAA,EACxD,SAAS,OAAO;AACZ,YAAQ,MAAM,qCAAgC,KAAK;AACnD,WAAO;AAAA,MACH,YAAY;AAAA,MACZ,MAAM,KAAK,UAAU;AAAA,QACjB,OAAO;AAAA,QACP,SAAS,iBAAiB,QAAQ,MAAM,UAAU,OAAO,KAAK;AAAA,MAClE,CAAC;AAAA,IACL;AAAA,EACJ;AACJ;",
  "names": []
}
